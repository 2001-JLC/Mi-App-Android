package com.example.asb


import android.content.Intent
import android.os.Bundle
import android.widget.Button
import android.widget.ImageView
import androidx.appcompat.app.AppCompatActivity
import com.example.asb.configuration.ConfigActivity
import com.example.asb.db.DataActivity
import com.example.asb.faults.FaultsActivity
import com.example.asb.monitoring.MonitoringActivity

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Configurar botones (por ahora solo abren Activities vacías)
        setupButtons()

        // Mostrar datos recibidos de EquipmentSelectionActivity
        showEquipmentData()
    }

    private fun setupButtons() {
        findViewById<Button>(R.id.btnMonitoring).setOnClickListener {
            startActivity(Intent(this, MonitoringActivity::class.java))
        }

        findViewById<Button>(R.id.btnFaults).setOnClickListener {
            startActivity(Intent(this, FaultsActivity::class.java))
        }

        findViewById<Button>(R.id.btnData).setOnClickListener {
            startActivity(Intent(this, DataActivity::class.java))
        }

        findViewById<Button>(R.id.btnConfig).setOnClickListener {
            startActivity(Intent(this, ConfigActivity::class.java))
        }
    }

    private fun showEquipmentData() {
        // Obtener datos del Intent
        val equipmentType = intent.getStringExtra("EQUIPMENT_TYPE_NAME") ?: "Pozo"
        intent.getIntExtra("EQUIPMENT_COUNT", 1)

        // Actualizar imagen según tipo de equipo
        val equipmentImage = when (equipmentType) {
            getString(R.string.equipment_svv) -> R.mipmap.svv
            getString(R.string.equipment_well) -> R.mipmap.pozo
            getString(R.string.equipment_hydro) -> R.mipmap.hidro
            getString(R.string.equipment_cistern) -> R.mipmap.carcamo_2b
            else -> R.mipmap.pozo
        }
        findViewById<ImageView>(R.id.ivEquipment).setImageResource(equipmentImage)

        // Aquí luego agregarás las vistas dinámicas para cada equipo
    }
}
----------------------------------------------------------------------------------------------------
package com.example.asb.auth

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.asb.configuration.EquipmentSelectionActivity
import com.example.asb.databinding.ActivityLoginBinding
import com.example.asb.db.DatabaseHelper
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext

class LoginActivity : AppCompatActivity() {

    private lateinit var binding: ActivityLoginBinding
    private lateinit var dbHelper: DatabaseHelper

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityLoginBinding.inflate(layoutInflater)
        setContentView(binding.root)

        dbHelper = DatabaseHelper(applicationContext)

        setupLoginButton()
    }

    private fun setupLoginButton() {
        binding.btnLogin.setOnClickListener {
            val username = binding.etUsername.text.toString().trim()
            val password = binding.etPassword.text.toString().trim()
            val workOrder = binding.etWorkOrder.text.toString().trim()

            if (validateFields(username, password, workOrder)) {
                attemptLogin(username, password, workOrder)
            }
        }
    }

    private fun validateFields(username: String, password: String, workOrder: String): Boolean {
        if (username.isEmpty() || password.isEmpty() || workOrder.isEmpty()) {
            Toast.makeText(this, "Complete todos los campos", Toast.LENGTH_SHORT).show()
            return false
        }
        return true
    }

    private fun attemptLogin(username: String, password: String, workOrder: String) {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                if (dbHelper.validateUser(username, password)) {
                    loginSuccess(username, workOrder)
                } else {
                    withContext(Dispatchers.Main) {
                        Toast.makeText(
                            this@LoginActivity,
                            "Usuario/contraseña incorrectos",
                            Toast.LENGTH_SHORT
                        ).show()
                    }
                }
            } catch (e: Exception) {
                withContext(Dispatchers.Main) {
                    Toast.makeText(
                        this@LoginActivity,
                        "Error: ${e.message}",
                        Toast.LENGTH_SHORT
                    ).show()
                    Log.e("LOGIN_ERROR", "Error en login", e)
                }
            }
        }
    }

    private suspend fun loginSuccess(username: String, workOrder: String) {
        val userId = dbHelper.getUserId(username)
        if (userId != -1L) {
            dbHelper.registerWorkOrder(workOrder, userId)
            withContext(Dispatchers.Main) {
                startActivity(
                    Intent(this@LoginActivity, EquipmentSelectionActivity::class.java).apply {
                        putExtra("CLIENT_ID", "001")
                        putExtra("WORK_ORDER", workOrder.padStart(4, '0'))
                        putExtra("USERNAME", username)
                    }
                )
                finish()
            }
        } else {
            withContext(Dispatchers.Main) {
                Toast.makeText(
                    this@LoginActivity,
                    "Error interno",
                    Toast.LENGTH_SHORT
                ).show()
            }
        }
    }

    override fun onDestroy() {
        dbHelper.close()
        super.onDestroy()
    }
}
----------------------------------------------------------------------------------------------------
package com.example.asb.configuration

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.example.asb.R

class ConfigActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_config)

        // Configuración básica (por ahora vacía)
    }
}

----------------------------------------------------------------------------------------------------
package com.example.asb.configuration

import android.content.Intent
import android.os.Bundle
import android.widget.ArrayAdapter
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.example.asb.MainActivity
import com.example.asb.R
import com.example.asb.databinding.ActivityEquipmentSelectionBinding

class EquipmentSelectionActivity : AppCompatActivity() {
    private lateinit var binding: ActivityEquipmentSelectionBinding
    private var equipmentCount = 1 // Valor inicial
    private lateinit var equipmentTypes: List<String>
    private lateinit var equipmentCodes: List<String>

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityEquipmentSelectionBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Configuración inicial
        setupEquipmentTypes()
        setupUI()
        setupListeners()
    }

    private fun setupEquipmentTypes() {
        // Tipos de equipos y sus códigos (deben coincidir en orden)
        equipmentTypes = listOf(
            getString(R.string.equipment_svv),
            getString(R.string.equipment_well),
            getString(R.string.equipment_hydro),
            getString(R.string.equipment_cistern)
        )

        equipmentCodes = listOf("01", "02", "03", "04")
    }

    private fun setupUI() {
        // Configurar el adaptador para el AutoCompleteTextView
        val adapter = ArrayAdapter(
            this,
            android.R.layout.simple_dropdown_item_1line,
            equipmentTypes
        )
        binding.actvEquipmentType.setAdapter(adapter)

        // Mostrar el contador inicial
        updateEquipmentCount()
    }

    private fun setupListeners() {
        // Botón para disminuir cantidad
        binding.btnDecrease.setOnClickListener {
            if (equipmentCount > 1) { // Mínimo 1 equipo
                equipmentCount--
                updateEquipmentCount()
            }
        }

        // Botón para aumentar cantidad
        binding.btnIncrease.setOnClickListener {
            // Sin límite máximo (eliminamos la condición de máximo 5)
            equipmentCount++
            updateEquipmentCount()
        }

        // Botón para continuar
        binding.btnContinue.setOnClickListener {
            validateAndContinue()
        }
    }

    private fun updateEquipmentCount() {
        binding.tvEquipmentCount.text = equipmentCount.toString()
    }

    private fun validateAndContinue() {
        val selectedType = binding.actvEquipmentType.text.toString()

        // Validar que se haya seleccionado un tipo
        if (selectedType.isEmpty() || !equipmentTypes.contains(selectedType)) {
            Toast.makeText(this, R.string.select_valid_equipment_type, Toast.LENGTH_SHORT).show()
            return
        }

        // Obtener el código del equipo seleccionado
        val selectedIndex = equipmentTypes.indexOf(selectedType)
        val typeCode = equipmentCodes[selectedIndex]

        // Pasar los datos a la siguiente actividad
        val intent = Intent(this, MainActivity::class.java).apply {
            putExtra("EQUIPMENT_TYPE_CODE", typeCode)
            putExtra("EQUIPMENT_TYPE_NAME", selectedType)
            putExtra("EQUIPMENT_COUNT", equipmentCount)

            // Agregar los extras del intent original si existen
            this@EquipmentSelectionActivity.intent.extras?.let { extras ->
                putExtras(extras)
            }
        }

        startActivity(intent)
    }
}
----------------------------------------------------------------------------------------------------
package com.example.asb.db

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import com.example.asb.R

class DataActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_data)

        // Configuración básica (por ahora vacía)
    }
}
----------------------------------------------------------------------------------------------------
package com.example.asb.db

import android.content.ContentValues
import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper
import android.util.Log

class DatabaseHelper(context: Context) : SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {

    companion object {
        private const val DATABASE_NAME = "MonitoringDB"
        private const val DATABASE_VERSION = 5

        // Tabla Usuarios
        const val TABLE_USERS = "users"
        const val COL_USER_ID = "user_id"
        const val COL_USERNAME = "username"
        const val COL_PASSWORD = "password"
        const val COL_FULL_NAME = "full_name"

        // Tabla Órdenes de Trabajo
        const val TABLE_WORK_ORDERS = "work_orders"
        const val COL_ORDER_ID = "order_id"
        const val COL_ORDER_NUMBER = "order_number"
        const val COL_USER_ID_FK = "user_id_fk"
        const val COL_CREATION_DATE = "creation_date"
    }

    override fun onCreate(db: SQLiteDatabase) {
        try {
            // 1. Crear tablas
            db.execSQL("""
                CREATE TABLE $TABLE_USERS (
                    $COL_USER_ID INTEGER PRIMARY KEY AUTOINCREMENT,
                    $COL_USERNAME TEXT UNIQUE NOT NULL,
                    $COL_PASSWORD TEXT NOT NULL,
                    $COL_FULL_NAME TEXT NOT NULL
                )
            """.trimIndent())

            db.execSQL("""
                CREATE TABLE $TABLE_WORK_ORDERS (
                    $COL_ORDER_ID INTEGER PRIMARY KEY AUTOINCREMENT,
                    $COL_ORDER_NUMBER TEXT NOT NULL,
                    $COL_USER_ID_FK INTEGER NOT NULL,
                    $COL_CREATION_DATE TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY ($COL_USER_ID_FK) REFERENCES $TABLE_USERS($COL_USER_ID)
                )
            """.trimIndent())

            // 2. Insertar usuario con verificación robusta
            if (insertDefaultUser(db) == -1L) {
                Log.e("DB_ERROR", "Fallo al crear usuario por defecto!")
            }
        } catch (e: Exception) {
            Log.e("DB_CREATION", "Error crítico al crear BD", e)
        }
    }

    private fun insertDefaultUser(db: SQLiteDatabase): Long {
        val values = ContentValues().apply {
            put(COL_USERNAME, "Leyva")
            put(COL_PASSWORD, "123")
            put(COL_FULL_NAME, "Jesus Leyva")
        }

        return db.insert(TABLE_USERS, null, values).also { userId ->
            if (userId != -1L) {
                Log.d("DB_SUCCESS", "Usuario creado con ID: $userId")
                verifyUserExists(db, "Leyva")
            }
        }
    }

    private fun verifyUserExists(db: SQLiteDatabase, username: String) {
        db.rawQuery(
            "SELECT 1 FROM $TABLE_USERS WHERE $COL_USERNAME = ?",
            arrayOf(username)
        ).use { cursor ->
            Log.d("DB_VERIFY", "Usuario $username existe: ${cursor.count > 0}")
        }
    }

    override fun onUpgrade(db: SQLiteDatabase, oldVersion: Int, newVersion: Int) {
        Log.w("DB_UPGRADE", "Forzando recreación de BD (v$oldVersion a v$newVersion)")
        db.execSQL("DROP TABLE IF EXISTS $TABLE_WORK_ORDERS")
        db.execSQL("DROP TABLE IF EXISTS $TABLE_USERS")
        onCreate(db)
    }

    fun validateUser(username: String, password: String): Boolean {
        readableDatabase.rawQuery(
            """
            SELECT 1 FROM $TABLE_USERS 
            WHERE $COL_USERNAME = ? COLLATE NOCASE 
            AND $COL_PASSWORD = ?
            """.trimIndent(),
            arrayOf(username.trim(), password.trim())
        ).use { cursor ->
            val exists = cursor.count > 0
            if (!exists) {
                Log.e("LOGIN_FAIL", "Usuario no encontrado: $username")
                verifyTableExists()
            }
            return exists
        }
    }

    private fun verifyTableExists() {
        readableDatabase.rawQuery(
            "SELECT name FROM sqlite_master WHERE type='table' AND name='$TABLE_USERS'",
            null
        ).use { cursor ->
            Log.d("DB_CHECK", "Tabla existe: ${cursor.count > 0}")
        }
    }

    fun registerWorkOrder(orderNumber: String, userId: Long): Long {
        val values = ContentValues().apply {
            put(COL_ORDER_NUMBER, orderNumber)
            put(COL_USER_ID_FK, userId)
        }
        return writableDatabase.insert(TABLE_WORK_ORDERS, null, values)
    }

    fun getUserId(username: String): Long {
        readableDatabase.rawQuery(
            "SELECT $COL_USER_ID FROM $TABLE_USERS WHERE $COL_USERNAME = ?",
            arrayOf(username)
        ).use { cursor ->
            return if (cursor.moveToFirst()) cursor.getLong(0) else -1L
        }
    }
}
----------------------------------------------------------------------------------------------------
package com.example.asb.faults

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import com.example.asb.R

class FaultsActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_faults)

        // Por ahora vacío, luego añadiremos lógica
    }
}
----------------------------------------------------------------------------------------------------
package com.example.asb.monitoring

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import com.example.asb.R

class MonitoringActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_monitoring)

        // Configuración básica (por ahora vacía)
    }
}
----------------------------------------------------------------------------------------------------
Layouts:
----------------------------------------------------------------------------------------------------
activity_equipment_selection

<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true"
    android:padding="16dp"
    tools:context=".configuration.EquipmentSelectionActivity">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center_horizontal"
        android:paddingHorizontal="24dp">

        <!-- Título -->
        <TextView
            android:id="@+id/tvTitle"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/configuraci_n_de_equipos"
            android:textSize="20sp"
            android:textStyle="bold"
            android:layout_marginBottom="24dp"/>

        <!-- Selector de Tipo de Equipo (Spinner mejorado) -->
        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tilEquipmentType"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_marginBottom="24dp"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox.ExposedDropdownMenu"
            android:hint="@string/tipo_de_equipo"
            app:startIconDrawable="@android:drawable/ic_menu_manage"
            app:startIconContentDescription="@string/icono_tipo_equipo">

            <AutoCompleteTextView
                android:id="@+id/actvEquipmentType"
                android:layout_width="match_parent"
                android:layout_height="56dp"
                android:completionHint="@string/seleccione_tipo_equipo"
                android:imeOptions="actionDone"
                android:inputType="none"
                tools:ignore="LabelFor" />
        </com.google.android.material.textfield.TextInputLayout>

        <!-- Selector de Cantidad de Equipos -->
        <TextView
            android:id="@+id/tvEquipmentCountLabel"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/cantidad_de_equipos"
            android:textSize="16sp"
            android:layout_marginBottom="16dp"/>

        <LinearLayout
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:gravity="center_vertical"
            android:layout_marginBottom="32dp">

            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnDecrease"
                android:layout_width="48dp"
                android:layout_height="48dp"
                app:icon="@android:drawable/ic_menu_close_clear_cancel"
                app:iconTint="@android:color/white"
                android:contentDescription="@string/decrementar_cantidad"
                android:backgroundTint="@color/purple_500"
                style="@style/Widget.MaterialComponents.Button.Icon"/>

            <TextView
                android:id="@+id/tvEquipmentCount"
                android:layout_width="80dp"
                android:layout_height="wrap_content"
                android:text="1"
                android:textSize="24sp"
                android:gravity="center"
                android:layout_marginHorizontal="16dp"/>

            <com.google.android.material.button.MaterialButton
                android:id="@+id/btnIncrease"
                android:layout_width="48dp"
                android:layout_height="48dp"
                app:icon="@android:drawable/ic_menu_add"
                app:iconTint="@android:color/white"
                android:contentDescription="@string/incrementar_cantidad"
                android:backgroundTint="@color/purple_500"
                style="@style/Widget.MaterialComponents.Button.Icon"/>
        </LinearLayout>

        <!-- Botón Continuar -->
        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnContinue"
            android:layout_width="match_parent"
            android:layout_height="56dp"
            android:text="@string/continuar"
            android:textAllCaps="false"
            android:textColor="@android:color/white"
            android:backgroundTint="@color/purple_500"
            style="@style/Widget.MaterialComponents.Button"/>
    </LinearLayout>
</ScrollView>
----------------------------------------------------------------------------------------------------
Login

<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:fillViewport="true"
    android:padding="8dp"
    tools:context=".auth.LoginActivity">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:gravity="center_horizontal"
        android:padding="16dp">

        <ImageView
            android:layout_width="120dp"
            android:layout_height="120dp"
            android:layout_marginBottom="24dp"
            android:contentDescription="@string/logo_de_la_aplicaci_n"
            android:src="@mipmap/ic_launcher"
            app:tint="?attr/colorPrimary"
            tools:ignore="ImageContrastCheck" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/sistema_de_monitoreo"
            android:textSize="24sp"
            android:textStyle="bold"
            android:textColor="?attr/colorPrimary"
            android:layout_marginBottom="32dp"/>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tilUsername"
            android:layout_width="300dp"
            android:layout_height="wrap_content"
            android:layout_marginBottom="8dp"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:hint="@string/usuario"
            app:startIconDrawable="@android:drawable/ic_menu_myplaces"
            app:helperText="@string/ingrese_su_usuario"
            app:helperTextTextColor="?attr/colorPrimary"
            app:hintTextColor="?attr/colorPrimary"
            app:boxStrokeColor="?attr/colorPrimary">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etUsername"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="text"
                android:importantForAccessibility="yes"
                android:contentDescription="@string/campo_usuario"
                android:textColor="@color/white"
                android:textColorHint="@color/gray_600"
                android:focusable="true"
                android:focusableInTouchMode="true"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tilPassword"
            android:layout_width="300dp"
            android:layout_height="wrap_content"
            android:layout_marginBottom="16dp"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:hint="@string/contrase_a"
            app:startIconDrawable="@android:drawable/ic_lock_lock"
            app:helperText="@string/ingrese_su_contrase_a"
            app:helperTextTextColor="?attr/colorPrimary"
            app:hintTextColor="?attr/colorPrimary"
            app:boxStrokeColor="?attr/colorPrimary">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etPassword"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="textPassword"
                android:importantForAccessibility="yes"
                android:contentDescription="@string/campo_contrase_a"
                android:textColor="@color/white"
                android:textColorHint="@color/gray_600"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.textfield.TextInputLayout
            android:id="@+id/tilWorkOrder"
            android:layout_width="300dp"
            android:layout_height="wrap_content"
            android:layout_marginBottom="24dp"
            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox"
            android:hint="@string/orden_de_trabajo"
            app:startIconDrawable="@android:drawable/ic_menu_agenda"
            app:helperText="@string/ingrese_numero_orden"
            app:helperTextTextColor="?attr/colorPrimary"
            app:hintTextColor="?attr/colorPrimary"
            app:boxStrokeColor="?attr/colorPrimary">

            <com.google.android.material.textfield.TextInputEditText
                android:id="@+id/etWorkOrder"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:inputType="number"
                android:importantForAccessibility="yes"
                android:contentDescription="@string/campo_orden_trabajo"
                android:textColor="@color/white"
                android:textColorHint="@color/gray_600"/>
        </com.google.android.material.textfield.TextInputLayout>

        <com.google.android.material.button.MaterialButton
            android:id="@+id/btnLogin"
            android:layout_width="300dp"
            android:layout_height="56dp"
            android:text="@string/iniciar_sesi_n"
            android:textAllCaps="false"
            android:textColor="@android:color/white"
            app:backgroundTint="@color/purple_500"
            style="@style/Widget.MaterialComponents.Button"
            android:focusable="true"
            android:clickable="true"/>
    </LinearLayout>
</ScrollView>
----------------------------------------------------------------------------------------------------
ActivityMain
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <!-- Encabezado -->
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="@color/verde_esmeralda"
        android:padding="12dp"
        android:orientation="horizontal"
        android:gravity="center_vertical">

        <ImageView
            android:layout_width="48dp"
            android:layout_height="48dp"
            android:src="@mipmap/asbombeo"
            android:contentDescription="@string/logo_empresa"
            android:layout_marginEnd="12dp"/>

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@string/nombre_empresa"
            android:textColor="@android:color/white"
            android:textSize="18sp"
            android:textStyle="bold"/>
    </LinearLayout>

    <!-- Contenido Principal - Scrollable -->
    <ScrollView
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:fillViewport="true">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="16dp">

            <!-- Imagen del Equipo -->
            <ImageView
                android:id="@+id/ivEquipment"
                android:layout_width="match_parent"
                android:layout_height="200dp"
                android:scaleType="centerCrop"
                android:src="@mipmap/pozo"
                android:contentDescription="@string/imagen_equipo"
                android:layout_marginBottom="16dp"/>

            <!-- Descripción del Proyecto -->
            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"
                android:layout_marginBottom="24dp">

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/obra"
                    android:textSize="16sp"
                    android:layout_marginBottom="8dp"/>

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/nombre_equipo"
                    android:textSize="16sp"
                    android:layout_marginBottom="8dp"/>

                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="@string/cliente"
                    android:textSize="16sp"/>
            </LinearLayout>

            <!-- Aquí irían los datos dinámicos de los equipos (se agregarán programáticamente) -->
            <LinearLayout
                android:id="@+id/containerEquipmentData"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical"/>
        </LinearLayout>
    </ScrollView>

    <!-- Barra de Botones Inferior -->
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:background="@color/verde_esmeralda"
        android:padding="8dp">

        <Button
            android:id="@+id/btnMonitoring"
            style="@style/Widget.MaterialComponents.Button.OutlinedButton"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="@string/monitoreo"
            android:textColor="@android:color/white"
            android:drawableTop="@drawable/monitoreo"
            android:drawableTint="@android:color/white"/>

        <Button
            android:id="@+id/btnFaults"
            style="@style/Widget.MaterialComponents.Button.OutlinedButton"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="@string/falla"
            android:textColor="@android:color/white"
            android:drawableTop="@drawable/warning"
            android:drawableTint="@android:color/white"/>

        <Button
            android:id="@+id/btnData"
            style="@style/Widget.MaterialComponents.Button.OutlinedButton"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="@string/datos"
            android:textColor="@android:color/white"
            android:drawableTop="@drawable/data"
            android:drawableTint="@android:color/white"/>

        <Button
            android:id="@+id/btnConfig"
            style="@style/Widget.MaterialComponents.Button.OutlinedButton"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="@string/conf"
            android:textColor="@android:color/white"
            android:drawableTop="@drawable/settings"
            android:drawableTint="@android:color/white"/>
    </LinearLayout>
</LinearLayout>
----------------------------------------------------------------------------------------------------
Para el layout de Config, data, faults, monotoring es la misma por que no hemodificado esas partes

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

</androidx.constraintlayout.widget.ConstraintLayout>
----------------------------------------------------------------------------------------------------
otros archivos:
----------------------------------------------------------------------------------------------------
Manifest

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.ASB"
        android:largeHeap="true"
        android:hardwareAccelerated="true"
        tools:targetApi="31">
        <activity
            android:name=".auth.LoginActivity"
            android:exported="true"
            android:theme="@style/Theme.ASB">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:theme="@style/Theme.ASB" />

        <!-- EquipmentSelectionActivity -->
        <activity
            android:name=".configuration.EquipmentSelectionActivity"
            android:exported="false" />
    </application>

</manifest>
----------------------------------------------------------------------------------------------------
themes.xml

<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Tema base (modo claro) -->
    <style name="Theme.ASB" parent="Theme.MaterialComponents.DayNight.NoActionBar">
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorSecondaryVariant">@color/teal_700</item>
        <item name="colorOnSecondary">@color/black</item>
        <item name="android:statusBarColor">?attr/colorPrimaryVariant</item>
        <item name="android:windowLightStatusBar" tools:targetApi="23">false</item>
    </style>
</resources>
----------------------------------------------------------------------------------------------------
style.xml

<resources>
    <!-- Estilos para TextInputLayout -->
    <style name="Widget.ASB.TextInputLayout.OutlinedBox" parent="Widget.MaterialComponents.TextInputLayout.OutlinedBox">
        <item name="hintTextColor">?attr/colorPrimary</item>
        <item name="boxStrokeColor">?attr/colorPrimary</item>
        <item name="android:textColorHint">@color/gray_600</item>
        <item name="android:textColor">@color/black</item>
        <item name="errorTextColor">@color/error_color</item>
    </style>

    <!-- Estilo para botones -->
    <style name="Widget.ASB.Button" parent="Widget.MaterialComponents.Button">
        <item name="backgroundTint">?attr/colorPrimary</item>
        <item name="android:textColor">@color/white</item>
    </style>
</resources>
----------------------------------------------------------------------------------------------------
strings.xml
<resources>
    <!-- Common -->
    <string name="app_name">ASB</string>
    <string name="unknown">Desconocido</string>

    <!-- Login -->
    <string name="logo_de_la_aplicaci_n">Logo de la aplicación</string>
    <string name="sistema_de_monitoreo">Sistema de Monitoreo</string>
    <string name="usuario">Usuario</string>
    <string name="campo_usuario">Campo para ingresar nombre de usuario</string>
    <string name="ingrese_su_usuario">Ingrese su nombre de usuario</string>
    <string name="contrase_a">Contraseña</string>
    <string name="campo_contrase_a">Campo para ingresar contraseña</string>
    <string name="ingrese_su_contrase_a">Ingrese su contraseña</string>
    <string name="orden_de_trabajo">Orden de Trabajo</string>
    <string name="campo_orden_trabajo">Campo para ingresar número de orden de trabajo</string>
    <string name="ingrese_numero_orden">Ingrese el número de orden</string>
    <string name="iniciar_sesi_n">Iniciar Sesión</string>
    <string name="invalid_credentials">Credenciales incorrectas</string>
    <string name="empty_work_order">Ingrese la orden de trabajo</string>

    <!-- Equipment Selection -->
    <string name="configuraci_n_de_equipos">Configuración de Equipos</string>
    <string name="tipo_de_equipo">Tipo de Equipo</string>
    <string name="selector_tipo_equipo">Selector de tipo de equipo. Toque para desplegar opciones</string>
    <string name="seleccione_el_tipo_de_equipo">Seleccione el tipo de equipo de la lista</string>
    <string name="seleccione_tipo_equipo">Seleccione un tipo</string>
    <string name="cantidad_de_equipos">Cantidad de Equipos</string>
    <string name="_1">1</string>
    <string name="mas">+</string>
    <string name="oo">-</string>
    <string name="continuar">Continuar</string>
    <string name="select_equipment_type">Seleccione un tipo de equipo</string>
    <string name="icono_tipo_equipo">Icono de tipo de equipo</string>
    <string name="select_valid_equipment_type">Seleccione un tipo de equipo válido</string>

    <!-- Equipment Types -->
    <string name="equipment_svv">SVV (Sistema de velocidad variable)</string>
    <string name="equipment_well">Pozo</string>
    <string name="equipment_hydro">Hidro</string>
    <string name="equipment_cistern">Carcamo</string>

    <!-- Main Activity -->
    <string name="main_title">Pantalla Principal - %1$s</string>
    <string name="equipment_info">Configuración: %1$d equipo(s) de tipo %2$s</string>
    <string name="topic_info">Topic MQTT: %1$s/%2$s/%3$s/%4$d/Datos</string>
    <string name="configurar_mqtt">Configurar MQTT</string>
    <string name="ver_equipos">Ver Equipos</string>

    <!-- Icons Description -->
    <string name="icon_person">Icono de usuario</string>
    <string name="icon_lock">Icono de candado</string>
    <string name="icon_work">Icono de orden de trabajo</string>
    <string name="icon_dropdown">Icono de menú desplegable</string>
    <string name="equipment_config_title">confg_title\n</string>
    <string name="equipment_type_hint">type_hint</string>
    <string name="equipment_count_label">count_label</string>
    <string name="continue_button">buttoncontinue</string>
    <string name="error_username_required">username</string>
    <string name="error_password_required">paswor</string>
    <string name="error_workorder_required">workorder</string>
    <string name="error_database">arror databsse</string>
    <string name="error_user_not_found">Errror user not found</string>
    <string name="error_invalid_credentials">credencial invalido</string>
    <string name="incrementar_cantidad">Incrementar</string>
    <string name="decrementar_cantidad">Decrementar</string>
    <!-- Main Activity  -->
    <string name="logo_empresa">Logo de Automatización y Sistemas de Bombeo</string>
    <string name="nombre_empresa">Automatización y Sistemas de Bombeo</string>
    <string name="imagen_equipo">Imagen del equipo instalado</string>
    <string name="obra">Obra:</string>
    <string name="nombre_equipo">Nombre del Equipo:</string>
    <string name="cliente">Cliente:</string>
    <string name="monitoreo">Monitoreo</string>
    <string name="falla">Falla</string>
    <string name="datos">Datos</string>
    <string name="conf">Conf</string>
</resources>
----------------------------------------------------------------------------------------------------
plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
}

android {
    namespace = "com.example.asb"
    compileSdk = 35

    defaultConfig {
        applicationId = "com.example.asb"
        minSdk = 24
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
    buildFeatures {
        viewBinding = true
        compose = true
    }
}

dependencies {
    implementation(libs.mqtt.client)
    implementation(libs.mqtt.android.service)
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.gson)
    implementation(libs.material)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}
----------------------------------------------------------------------------------------------------
[versions]
agp = "8.8.0"
kotlin = "2.0.0"
coreKtx = "1.15.0"
junit = "4.13.2"
junitVersion = "1.2.1"
espressoCore = "3.6.1"
lifecycleRuntimeKtx = "2.8.7"
activityCompose = "1.10.1"
composeBom = "2024.04.01"
appcompat = "1.7.0"
constraintlayout = "2.2.1"
mqtt-client = "1.2.5"
mqtt-android-service = "1.1.1"
gson = "2.10.1"
material = "1.12.0"

[libraries]
androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
junit = { group = "junit", name = "junit", version.ref = "junit" }
androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
androidx-lifecycle-runtime-ktx = { group = "androidx.lifecycle", name = "lifecycle-runtime-ktx", version.ref = "lifecycleRuntimeKtx" }
androidx-activity-compose = { group = "androidx.activity", name = "activity-compose", version.ref = "activityCompose" }
androidx-compose-bom = { group = "androidx.compose", name = "compose-bom", version.ref = "composeBom" }
androidx-ui = { group = "androidx.compose.ui", name = "ui" }
androidx-ui-graphics = { group = "androidx.compose.ui", name = "ui-graphics" }
androidx-ui-tooling = { group = "androidx.compose.ui", name = "ui-tooling" }
androidx-ui-tooling-preview = { group = "androidx.compose.ui", name = "ui-tooling-preview" }
androidx-ui-test-manifest = { group = "androidx.compose.ui", name = "ui-test-manifest" }
androidx-ui-test-junit4 = { group = "androidx.compose.ui", name = "ui-test-junit4" }
androidx-material3 = { group = "androidx.compose.material3", name = "material3" }
androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }
mqtt-client = { module = "org.eclipse.paho:org.eclipse.paho.client.mqttv3", version.ref = "mqtt-client" }
mqtt-android-service = { module = "org.eclipse.paho:org.eclipse.paho.android.service", version.ref = "mqtt-android-service" }
gson = { group = "com.google.code.gson", name = "gson", version.ref = "gson" }
material = { group = "com.google.android.material", name = "material", version.ref = "material" }


[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin-compose = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }


----------------------------------------------------------------------------------------------------
// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.kotlin.android) apply false
    alias(libs.plugins.kotlin.compose) apply false
}
----------------------------------------------------------------------------------------------------
***************Fue todo lo que configure asta ahorita.********************
----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------