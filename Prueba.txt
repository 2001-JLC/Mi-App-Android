Resumen del Proyecto (Avance Actual)
1. Estructura B√°sica
Paquetes organizados por funcionalidad:

com.example.asb/
‚îú‚îÄ‚îÄ configuration/ (Selecci√≥n de equipos)
‚îú‚îÄ‚îÄ login/        (Autenticaci√≥n)
‚îú‚îÄ‚îÄ monitoring/   (Pantallas vac√≠as)
‚îú‚îÄ‚îÄ faults/       (Pantallas vac√≠as)
‚îú‚îÄ‚îÄ data/         (Pantallas vac√≠as)
‚îî‚îÄ‚îÄ MainActivity  (Pantalla principal)

2. Flujo Implementado
Login ‚Üí Selecci√≥n de Equipos ‚Üí Pantalla Principal ‚Üí (Botones inferiores).

Datos clave transmitidos:

CLIENT_ID (ej: "001")

WORK_ORDER (ej: "0001")

EQUIPMENT_TYPE (ej: "01" para SVV)

EQUIPMENT_COUNT (ej: 3)

3. Pantallas Completadas

_________________________________________________________________________________________________________
Pantalla	      |  Funci√≥n	           |           Caracter√≠sticas
______________________|____________________________|_____________________________________________________
Login	              |  Validar credenciales	   |   - Campos: Usuario, Contrase√±a, Orden de Trabajo
                      |                            |   - SQLite para almacenamiento
______________________|____________________________|_____________________________________________________
EquipmentSelection    |  Configurar equipos	   |   - Spinner con tipos de equipos
                      |                            |   - Selector de cantidad (1-N)
                      |                            |   - Genera MQTT_TOPIC_BASE
______________________|____________________________|_____________________________________________________
MainActivity	      |  Dashboard principal	   |   - Encabezado personalizado (logo + nombre)
                      |                            |   - 4 botones inferiores
                      |                            |   - √Årea para datos din√°micos
                      |                            |   - 4 botones inferiores
                      |                            |   - √Årea para datos din√°micos
______________________|____________________________|_____________________________________________________

4. Pr√≥ximos Pasos (MQTT)
Objetivo: Recibir datos en tiempo real de los equipos mediante el protocolo MQTT
----------------------------------------------
Lo que quieres lograr:
Sistema de Login Seguro
    -Con usuarios, contrase√±as y √≥rdenes de trabajo
    -Validaci√≥n de credenciales en base de datos SQLite

Configuraci√≥n Din√°mica de Equipos
     -Selecci√≥n de tipo de equipo (SVV, Pozo, Hidro, Carcamo)
     -Cantidad de equipos (1-5)
     -Generaci√≥n de estructura de topics MQTT basada en esta configuraci√≥n

Comunicaci√≥n MQTT
     -Conexi√≥n a broker p√∫blico (test.mosquitto.org)
     -Suscripci√≥n a topics con estructura: [cliente]/[orden]/[tipo]/[cantidad]/Datos
     -Recepci√≥n de datos en formato JSON con informaci√≥n de equipos

Visualizaci√≥n de Datos
    -Mostrar estado (encendido/apagado)
    -Mostrar valores de voltaje, corriente y frecuencia
    -Interfaz din√°mica que se adapta al tipo y cantidad de equipos
_________________________________________________________________________________________________
com.tuempresa.monitoreo/
‚îú‚îÄ‚îÄ auth/
‚îÇ   ‚îú‚îÄ‚îÄ LoginActivity.kt
‚îÇ   ‚îî‚îÄ‚îÄ AuthHelper.kt
‚îú‚îÄ‚îÄ configuration/
‚îÇ   ‚îú‚îÄ‚îÄ EquipmentSelectionActivity.kt
‚îÇ   ‚îî‚îÄ‚îÄ EquipmentConfig.kt
‚îú‚îÄ‚îÄ mqtt/
‚îÇ   ‚îú‚îÄ‚îÄ MQTTManager.kt
‚îÇ   ‚îú‚îÄ‚îÄ MQTTService.kt
‚îÇ   ‚îî‚îÄ‚îÄ TopicGenerator.kt
‚îú‚îÄ‚îÄ data/
‚îÇ   ‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Equipment.kt
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EquipmentType.kt
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ WorkOrder.kt
‚îÇ   ‚îú‚îÄ‚îÄ db/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AppDatabase.kt
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ UserDao.kt
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ WorkOrderDao.kt
‚îÇ   ‚îî‚îÄ‚îÄ repository/
‚îÇ       ‚îú‚îÄ‚îÄ UserRepository.kt
‚îÇ       ‚îî‚îÄ‚îÄ EquipmentRepository.kt
‚îú‚îÄ‚îÄ ui/
‚îÇ   ‚îú‚îÄ‚îÄ main/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MainActivity.kt
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ EquipmentAdapter.kt
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ viewholders/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ SvvViewHolder.kt
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ PozoViewHolder.kt
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ HidroViewHolder.kt
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ CarcamoViewHolder.kt
‚îÇ   ‚îî‚îÄ‚îÄ dialogs/
‚îÇ       ‚îî‚îÄ‚îÄ EquipmentDialog.kt
‚îî‚îÄ‚îÄ utils/
    ‚îú‚îÄ‚îÄ JsonParser.kt
    ‚îî‚îÄ‚îÄ Constants.kt

_________________________________________________________________________________________
 1. Arquitectura General

graph TD
    A[Node-RED] -- MQTT --> B[Android]
    B --> C[MonitoringActivity]
    C --> D[MqttClientManager]
    C --> E[JsonParser]
    C --> F[DynamicEquipment]

2. Componentes Principales
a) MonitoringActivity.kt (Pantalla principal)
Responsabilidades:

Gestiona la conexi√≥n MQTT.

Renderiza din√°micamente equipos y datos.

Actualiza la UI en tiempo real con runOnUiThread.

Flujo:

Recibe JSON via MQTT.

Parsea datos con JsonParser.

Genera vistas con updateDynamicViews().

b) MqttClientManager.kt (Conexi√≥n MQTT)
Config:

Broker: tcp://test.mosquitto.org:1883

Callbacks para:

onMessageReceived (nuevos datos).

onConnectionLost (manejo de errores).

M√©todos clave:

connect(), subscribe(), disconnect().

c) JsonParser.kt (Conversi√≥n JSON ‚Üí Objetos)
L√≥gica:

Usa Gson + TypeToken para parsear estructuras din√°micas.

Espera JSON con formato:

kotlin
Copy
{
  "equipos": [
    {
      "nombre": String,
      "datos": Map<String, Any> // Clave-Valor din√°mico
    }
  ]
}
d) DynamicEquipment.kt (Modelo de datos)
Estructura:

kotlin
Copy
data class DynamicEquipment(
    val nombre: String,           // Ej: "Bomba 1"
    val datos: Map<String, Any>   // Ej: {"voltaje": 220.5, "corriente": 10.2}
)
üé® 3. UI y Layouts
a) activity_monitoring.xml
Estructura:

ScrollView ‚Üí Contenedor principal.

LinearLayout (equipmentContainer): Aqu√≠ se a√±aden las tarjetas din√°micas.

TextView (tvConnectionStatus): Estado de MQTT.

b) item_pozo_dynamic.xml (Tarjeta por equipo)
Dise√±o:

Horizontal: Imagen (izq) + Datos (der).

Partes:

ImageView (icono bomba_pozo).

TextView (nombre del equipo).

LinearLayout (contenedor para datos din√°micos).

‚ö° 4. Dinamismo Implementado
Para Equipos:
C√≥digo:

kotlin
Copy
binding.equipmentContainer.removeAllViews()
equipos.forEach { equipo ->
    val itemView = inflater.inflate(R.layout.item_pozo_dynamic, ...)
    itemView.tvNombre.text = equipo.nombre // Nombre din√°mico
    // ...
}
Resultado:
Crea tantas tarjetas como objetos tenga "equipos" en el JSON.

Para Datos:
C√≥digo:

kotlin
Copy
equipo.datos.forEach { (key, value) ->
    val textView = TextView(this).apply {
        text = "$key: $value" // Texto din√°mico
    }
    dataContainer.addView(textView)
}
Resultado:
Muestra todos los pares clave-valor del mapa datos, sin l√≠mite predefinido.

üîå 5. Integraci√≥n con Node-RED
Flow MQTT:

Publica en el topic: 001/0001/02/2/Datos.

Formato requerido:

json
Copy
{
  "equipos": [
    {
      "nombre": "Bomba 1",
      "datos": {
        "voltaje": 220.5,
        "corriente": 10.2
      }
    }
  ]
}
üõ† 6. Personalizaci√≥n Pendiente
Estilo:

Modifica card_background.xml para sombras/bordes.

Ajusta colores en item_pozo_dynamic.xml.

Im√°genes:

Para m√∫ltiples tipos de equipos, usa when en Kotlin:

val imageRes = when (equipo.nombre) {
    "Bomba" -> R.mipmap.bomba_pozo
    "Ventilador" -> R.mipmap.ventilador
    else -> R.mipmap.default_image
}

itemView.ivEquipment.setImageResource(imageRes)
‚ö†Ô∏è 7. Posibles Mejoras
Validaci√≥n de JSON:
A√±adir checks para campos obligatorios (nombre, datos).

Performance:
Usar RecyclerView en lugar de LinearLayout para muchos equipos.

Seguridad:
Validar topics MQTT y datos recibidos.

